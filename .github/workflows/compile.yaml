name: compile
on:
  schedule:
    - cron: "0 3 * * *"

  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: false
  push:
    branches: [master]
  
jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: "Check access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  telegram-bot-api-binary: # complie telegram-bot-api-binary
    name: telegram-bot-api-binary
    needs: check
    runs-on: ubuntu-latest
    steps:
      # - name: update dependence
      #   run: sudo apt-get update && sudo apt-get upgrade
      - name: install dependencies
        run: sudo apt install -y openssl zlib1g gcc g++ gperf cmake make curl wget git libc6-dev
      - name: Checkout
        uses: actions/checkout@v2
      - name: clone repo
        run: |
              git clone --recursive https://github.com/tdlib/telegram-bot-api.git
              git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: build	
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target install
          cd ../..
          ls -l telegram-bot-api/build/telegram-bot-api*
          cp telegram-bot-api/build/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary

  telegram-bot-api-binary-clang: # complie telegram-bot-api-binary
    name: telegram-bot-api-binary-clang
    runs-on: ubuntu-latest
    needs: check
    steps:
      # - name: update dependence
      #   run: sudo apt-get update && sudo apt-get upgrade
      - name: install dependencies
        run: sudo apt install -y openssl zlib1g gcc g++ gperf cmake make curl wget git clang libc++-dev libc++abi-dev
      - name: Checkout
        uses: actions/checkout@v2
      - name: clone repo
        run: |
              git clone --recursive https://github.com/tdlib/telegram-bot-api.git
              git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v2
        with:
          path: telegram-bot-api-binary-clang
          key: CI-telegram-bot-api-clang-${{ hashFiles('telegram-bot-api-status') }}
      - name: build	
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/build/telegram-bot-api telegram-bot-api-binary-clang
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary-clang
          path: telegram-bot-api-binary-clang

  bird: # complie bird
    name: bird
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: install dependencies
        run: sudo apt install -y gcc make autoconf flex bison libncurses-dev libreadline-dev
      - name: Checkout
        uses: actions/checkout@v2
      - name: clone repo
        run: |
              wget https://bird.network.cz/download/bird-2.0.10.tar.gz
      - name: Cache Bird Binary
        id: cache-bird-binary
        uses: actions/cache@v2
        with:
          path: bird-binary
          key: CI-bird2-${{ hashFiles('bird-2.0.10.tar.gz') }}
      - name: build
        if: steps.cache-bird-binary.outputs.cache-hit != 'true'
        run: |
          tar -xzf bird-2.0.10.tar.gz
          cd bird-2.0.10
          autoreconf -i
          ./configure
          make
          cd ..
          mkdir bird-binary
          cp bird-2.0.10/bird bird-binary/bird
          cp bird-2.0.10/birdc bird-binary/birdc
          ls
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: bird-binary
          path: |
            bird-binary/bird
      - name: Upload Binary1
        uses: actions/upload-artifact@master
        with:
          name: birdc-binary
          path: |
            bird-binary/birdc

  release:
    name: release
    runs-on: ubuntu-latest
    needs: 
      - check 
      - telegram-bot-api-binary
      - telegram-bot-api-binary-clang
      - bird
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        # echo day as tag into env
      - name: Set Tag
        if: github.event.inputs.tag == ''
        run: |
          echo "tag is empty"
          echo "set tag to day"
          echo "tag=$(date +%Y%m%d)" >> $GITHUB_ENV

      # ignore if all binary cache hit
      - name: check cache
        if: steps.telegram-bot-api-binary.outputs.cache-hit == 'true' && steps.telegram-bot-api-binary-clang.outputs.cache-hit == 'true' && steps.bird.outputs.cache-hit == 'true'
        run: |
          echo "all cache hit"
          exit 0
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Download Bird Binary
        uses: actions/download-artifact@master
        with:
          name: bird-binary
          path: .
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary-clang
          path: .
      - name: Download Birdc Binary
        uses: actions/download-artifact@master
        with:
          name: birdc-binary
          path: .
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            telegram-bot-api-binary/telegram-bot-api
            bird-binary/bird
            bird-binary/birdc
            telegram-bot-api-binary-clang/telegram-bot-api
          # get tag from env
          tag_name: ${{ github.event.inputs.tag || env.tag }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
  # glibc:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install dependencies
  #       run: sudo apt install -y gcc make autoconf flex bison libncurses-dev libreadline-dev
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: clone repo
  #       run: |
  #             wget http://ftp.gnu.org/gnu/glibc/glibc-2.29.tar.gz
  #     # - name: Cache Glibc Binary
  #     #   id: cache-glibc-binary
  #     #   uses: actions/cache@v2
  #     #   with:
  #     #     path: glibc-binary
  #     #     key: CI-glibc-${{ hashFiles('glibc-2.29.tar.gz') }}
  #     - name: build
  #       # if: steps.cache-glibc-binary.outputs.cache-hit != 'true'
  #       run: |
  #         tar -xzf glibc-2.29.tar.gz
  #         cd glibc-2.29
  #         mkdir build
  #         cd build
  #         ../configure --disable-sanity-checks
  #         make
  #         cd ..
  #         mkdir glibc-binary
  #         cp glibc-2.29/lib/libc.so.6 glibc-binary/libc.so.6
  #         ls


  # publish:
  #   needs:
  #     - telegram-bot-api-binary
  #     - bird
  #     - telegram-bot-api-binary-clang
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Download Telegram Bot API Binary
  #       uses: actions/download-artifact@master
  #       with:
  #         name: telegram-bot-api-binary
  #         path: .
  #     - name: Download Bird Binary
  #       uses: actions/download-artifact@master
  #       with:
  #         name: bird-binary
  #         path: .
  #     - name: Download Telegram Bot API Binary
  #       uses: actions/download-artifact@master
  #       with:
  #         name: telegram-bot-api-binary-clang
  #         path: .
  #     - name: Download Birdc Binary
  #       uses: actions/download-artifact@master
  #       with:
  #         name: birdc-binary
  #         path: .
  #     - name: Release
  #       run: |
  #         wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
  #         tar -xvf ghr.tar.gz
  #         mv ghr*linux_amd64/ghr .
  #         mkdir bin
  #         ls -l
  #         find . -name "telegram-bot-api-binary" -exec cp {} bin \;
  #         find . -name "bird" -exec cp {} bin \;
  #         find . -name "birdc" -exec cp {} bin \;
  #         find . -name "telegram-bot-api-binary-clang" -exec cp {} bin \;
  #         ./ghr -delete -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" bin
  



      
